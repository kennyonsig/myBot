import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ChatMemberAdministrator
from aiogram import F
import pytz

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_moscow_time():
    return datetime.now(MOSCOW_TZ)

active_feedings = {}

def get_start_keyboard():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üçº –ù–∞—á–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="start_feeding")]
    ])

def get_finish_keyboard():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="finish_feeding"),
         types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="cancel_feeding")]
    ])

async def is_user_admin(chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return isinstance(member, ChatMemberAdministrator) or member.status == "creator"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def has_permission(chat_id: int, user_id: int, feeding_user_id: int) -> bool:
    if user_id == feeding_user_id:
        return True
    return await is_user_admin(chat_id, user_id)

@dp.message(Command("start", "help"))
async def start_cmd(message: types.Message):
    text = (
        "üë∂ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏–π\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/feeding - –ù–∞—á–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ\n"
        "/end_feeding - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    await message.answer(text, reply_markup=get_start_keyboard())

async def ask_prepared_ml(chat_id: int):
    msg = await bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –º–ª –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ?")
    active_feedings[chat_id]['prepared_request_id'] = msg.message_id
    active_feedings[chat_id]['state'] = 'waiting_prepared'

async def ask_eaten_ml(chat_id: int):
    msg = await bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –º–ª —Å—ä–µ–¥–µ–Ω–æ?")
    active_feedings[chat_id]['eaten_request_id'] = msg.message_id
    active_feedings[chat_id]['state'] = 'waiting_eaten'

async def delete_messages(chat_id: int, *message_ids):
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

@dp.callback_query(F.data == "start_feeding")
async def start_feeding_callback(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    
    if chat_id in active_feedings:
        await callback.answer("‚ùå –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!", show_alert=True)
        return
    
    start_time = get_moscow_time()
    text = (
        "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!\n"
        f"üë§ –ö—Ç–æ –∫–æ—Ä–º–∏—Ç: {user_name}\n"
        f"üìÖ –î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n"
        f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M')}\n"
        f"üõë –ö–æ–Ω–µ—Ü: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
    )
    
    msg = await bot.send_message(chat_id, text, reply_markup=get_finish_keyboard())
    
    active_feedings[chat_id] = {
        "message_id": msg.message_id,
        "start_time": start_time,
        "user_id": user_id,
        "user_name": user_name,
        "prepared_ml": None,
        "eaten_ml": None,
        "state": None,
        "prepared_request_id": None,
        "eaten_request_id": None
    }
    
    await ask_prepared_ml(chat_id)
    await callback.answer()

@dp.callback_query(F.data == "finish_feeding")
async def end_feeding_callback(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    
    if chat_id not in active_feedings:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è!", show_alert=True)
        return
    
    feeding_data = active_feedings[chat_id]
    if not await has_permission(chat_id, user_id, feeding_data["user_id"]):
        await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ!", show_alert=True)
        return
    
    await ask_eaten_ml(chat_id)
    await callback.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ –º–ª")

@dp.callback_query(F.data == "cancel_feeding")
async def cancel_feeding_callback(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    
    if chat_id not in active_feedings:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è!", show_alert=True)
        return
    
    feeding_data = active_feedings[chat_id]
    if not await has_permission(chat_id, user_id, feeding_data["user_id"]):
        await callback.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    request_ids = []
    if feeding_data['prepared_request_id']:
        request_ids.append(feeding_data['prepared_request_id'])
    if feeding_data['eaten_request_id']:
        request_ids.append(feeding_data['eaten_request_id'])
    
    await delete_messages(chat_id, *request_ids)
    
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=feeding_data["message_id"],
        text="‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_start_keyboard()
    )
    
    del active_feedings[chat_id]
    await callback.answer("‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")

@dp.message(Command("feeding"))
async def start_feeding_cmd(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    if chat_id in active_feedings:
        await message.reply("‚ùå –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.")
        return
    
    start_time = get_moscow_time()
    text = (
        "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!\n"
        f"üë§ –ö—Ç–æ –∫–æ—Ä–º–∏—Ç: {user_name}\n"
        f"üìÖ –î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n"
        f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M')}\n"
        f"üõë –ö–æ–Ω–µ—Ü: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
    )
    
    msg = await message.reply(text, reply_markup=get_finish_keyboard())
    
    active_feedings[chat_id] = {
        "message_id": msg.message_id,
        "start_time": start_time,
        "user_id": user_id,
        "user_name": user_name,
        "prepared_ml": None,
        "eaten_ml": None,
        "state": None,
        "prepared_request_id": None,
        "eaten_request_id": None
    }
    
    await ask_prepared_ml(chat_id)

@dp.message(Command("end_feeding"))
async def end_feeding_cmd(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if chat_id not in active_feedings:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è!")
        return
    
    feeding_data = active_feedings[chat_id]
    if not await has_permission(chat_id, user_id, feeding_data["user_id"]):
        await message.reply("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ!")
        return
    
    await ask_eaten_ml(chat_id)

@dp.message(Command("cancel"))
async def cancel_feeding_cmd(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if chat_id not in active_feedings:
        await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è!")
        return
    
    feeding_data = active_feedings[chat_id]
    if not await has_permission(chat_id, user_id, feeding_data["user_id"]):
        await message.reply("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    request_ids = []
    if feeding_data['prepared_request_id']:
        request_ids.append(feeding_data['prepared_request_id'])
    if feeding_data['eaten_request_id']:
        request_ids.append(feeding_data['eaten_request_id'])
    
    await delete_messages(chat_id, *request_ids)
    
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=feeding_data["message_id"],
        text="‚ùå –ö–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_start_keyboard()
    )
    
    del active_feedings[chat_id]

@dp.message(F.text)
async def handle_ml_input(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in active_feedings:
        return

    feeding_data = active_feedings[chat_id]
    state = feeding_data['state']
    
    if state not in ['waiting_prepared', 'waiting_eaten']:
        return

    try:
        ml = int(message.text)
        if ml < 0:
            raise ValueError
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å
    request_id = None
    if state == 'waiting_prepared':
        feeding_data['prepared_ml'] = ml
        request_id = feeding_data['prepared_request_id']
        feeding_data['state'] = None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        start_time = feeding_data['start_time']
        text = (
            "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!\n"
            f"üë§ –ö—Ç–æ –∫–æ—Ä–º–∏—Ç: {feeding_data['user_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n"
            f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M')}\n"
            f"üç∂ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {ml} –º–ª\n"
            f"üõë –ö–æ–Ω–µ—Ü: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
        )
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=feeding_data['message_id'],
            text=text,
            reply_markup=get_finish_keyboard()
        )
        
    elif state == 'waiting_eaten':
        feeding_data['eaten_ml'] = ml
        request_id = feeding_data['eaten_request_id']
        feeding_data['state'] = None
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ
        end_time = get_moscow_time()
        start_time = feeding_data['start_time']
        duration = end_time - start_time
        minutes = duration.seconds // 60
        finisher_name = message.from_user.full_name
        
        prepared = feeding_data['prepared_ml'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        eaten = ml
        
        text = (
            "‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"üë§ –ö—Ç–æ –∫–æ—Ä–º–∏–ª: {feeding_data['user_name']}\n"
            f"üë§ –ó–∞–≤–µ—Ä—à–∏–ª: {finisher_name}\n"
            f"üìÖ –î–∞—Ç–∞: {start_time.strftime('%d.%m.%Y')}\n"
            f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M')}\n"
            f"‚è±Ô∏è –ö–æ–Ω–µ—Ü: {end_time.strftime('%H:%M')}\n"
            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω\n"
            f"üç∂ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {prepared} –º–ª\n"
            f"üç¥ –°—ä–µ–¥–µ–Ω–æ: {eaten} –º–ª"
        )
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=feeding_data['message_id'],
            text=text,
            reply_markup=get_start_keyboard()
        )
        
        del active_feedings[chat_id]
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_messages(chat_id, request_id, message.message_id)




if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)